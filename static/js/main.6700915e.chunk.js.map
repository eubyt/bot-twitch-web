{"version":3,"sources":["store/actions/statusObsRemote.js","wss/streamlabsRemote.js","store/actions/statusTwitch.js","wss/twitchChatbot.js","page/home.js","page/comando.js","App.js","store/reducers/project.js","store/reducers/index.js","store/index.js","index.js"],"names":["setStatusObsRemote","value","type","statusObsRemote","socket","nextRequestId","scenes","requests","sendMessage","message","requestBody","JSON","parse","e","console","log","id","Promise","resolve","reject","body","completed","send","stringify","request","resourceId","methodName","args","jsonrpc","method","params","resource","onConnectionHandler","onActive","dispatch","then","response","forEach","scene","push","addScene","createConection","url","token","onError","SockJS","require","onopen","catch","onmessage","data","error","result","onMessageHandler","onclose","reason","setStatusTwitch","statusTwitch","client","createTmi","name","oauth","channels","tmi","Client","options","debug","messagesLogLevel","connection","reconnect","secure","identity","username","password","on","address","port","channel","user","self","localStorage","getItem","slice","split","command","shift","toLowerCase","msg","replace","trim","cena","currentScene","filter","x","setScene","length","defaultScene","say","connect","Twitch","useState","setValue","project","useSelector","state","useDispatch","handleChange","prevState","target","className","onSubmit","preventDefault","setItem","disconnect","placeholder","onChange","OBS","close","Home","Command","App","setState","useEffect","href","onClick","data-feather","role","start_state","combineReducers","action","createStore","reducers","feather","ReactDOM","render","StrictMode","store","Store","document","getElementById"],"mappings":"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","file":"static/js/main.6700915e.chunk.js","sourcesContent":["export default function setStatusObsRemote(value) {\r\n    return { type: 'SET_STATUS_OBS_REMOTE', statusObsRemote: value}\r\n}","import setStatusObsRemote from '../store/actions/statusObsRemote';\r\n\r\nlet socket = null;\r\nlet nextRequestId = 1;\r\nlet scenes = [];\r\nlet requests = {};\r\n\r\nconst sendMessage = message => {\r\n    let requestBody = message\r\n\r\n    if (typeof message === 'string') {\r\n        try {\r\n            requestBody = JSON.parse(message);\r\n        } catch (e) {\r\n            console.log('Invalid JSON');\r\n            return\r\n        }\r\n    }\r\n\r\n    if (!requestBody.id) {\r\n        console.log('id is required')\r\n        return\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n        requests[requestBody.id] = {\r\n            body: requestBody,\r\n            resolve,\r\n            reject,\r\n            completed: false\r\n        };\r\n        socket.send(JSON.stringify(requestBody));\r\n    });\r\n}\r\n\r\nconst onMessageHandler = data => {\r\n    let message = JSON.parse(data);\r\n    console.log(message)\r\n    let request = requests[message.id];\r\n\r\n    if (request) {\r\n        if (message.error) {\r\n            request.reject(message.error);\r\n        } else {\r\n            request.resolve(message.result);\r\n        }\r\n        delete requests[message.id];\r\n    }\r\n}\r\n\r\nconst request = (resourceId, methodName, ...args) => {\r\n    let id = nextRequestId++;\r\n    let requestBody = {\r\n        jsonrpc: '2.0',\r\n        id,\r\n        method: methodName,\r\n        params: { resource: resourceId, args }\r\n    };\r\n\r\n    return sendMessage(requestBody);\r\n}\r\n\r\nconst addScene = scene => scenes.push({ ...scene })\r\n\r\nconst onConnectionHandler = (onActive, dispatch) => {\r\n    dispatch(setStatusObsRemote(\"connected\"))\r\n    onActive();\r\n    request('ScenesService', 'getScenes').then(response => {\r\n        response.forEach(scene => addScene(scene));\r\n    });\r\n}\r\n\r\nexport function setScene(name) {\r\n    const currentScene = scenes.filter(x => x.name === name)[0]\r\n    if (currentScene != null)\r\n        request('ScenesService', 'makeSceneActive', currentScene.id)\r\n}\r\n\r\nexport function closeConection() {\r\n    socket.close()\r\n}\r\n\r\nexport function createConection(url, token, onActive, onError, dispatch) {\r\n    const SockJS = require(\"sockjs-client\")\r\n    dispatch(setStatusObsRemote(\"pending\"))\r\n    socket = new SockJS(url)\r\n    socket.onopen = () => {\r\n        request('TcpServerService', 'auth', token).then(() => {\r\n            onConnectionHandler(onActive, dispatch);\r\n        }).catch(e => {\r\n            dispatch(setStatusObsRemote(\"disconnected\"))\r\n            onError(e.message)\r\n        })\r\n    };\r\n    socket.onmessage = e => onMessageHandler(e.data);\r\n    socket.onclose = (e) => {\r\n        dispatch(setStatusObsRemote(\"disconnected\"))\r\n        onError(e.reason)\r\n    };\r\n}\r\n","export default function setStatusTwitch(value) {\r\n    return { type: 'SET_STATUS_TWITCH', statusTwitch: value}\r\n}","import setStatusTwitch from '../store/actions/statusTwitch';\r\nimport { setScene } from './streamlabsRemote';\r\n\r\nlet client = null;\r\n\r\nexport function disconnectTmi() {\r\n    client.disconnect();\r\n}\r\n\r\nexport function createTmi(name, oauth, channels, onActive, onError, dispatch) {\r\n    const tmi = require('tmi.js');\r\n\r\n    client = new tmi.Client({\r\n        options: { debug: true, messagesLogLevel: \"info\" },\r\n        connection: {\r\n            reconnect: true,\r\n            secure: true\r\n        },\r\n        identity: {\r\n            username: name,\r\n            password: oauth\r\n        },\r\n        channels: channels\r\n    });\r\n\r\n    client.on(\"connected\", (address, port) => {\r\n        dispatch(setStatusTwitch(\"connected\"))\r\n    });\r\n\r\n    client.on(\"disconnected\", (reason) => {\r\n        dispatch(setStatusTwitch(\"disconnected\"))\r\n    });\r\n\r\n    client.on(\"chat\", (channel, user, message, self) => {\r\n        // if (self) return;\r\n        let data = JSON.parse(localStorage.getItem(\"command-obsRemote\"))\r\n\r\n        let params = message.slice(1).split(' ');\r\n        let command = `!${params.shift().toLowerCase()}`;\r\n        let msg = message.replace(command, \"\").trim()\r\n\r\n        if (command === data.command) {\r\n            let cena = null\r\n\r\n            if (params.length < 1)\r\n                cena = data.defaultScene\r\n            else\r\n                cena = msg\r\n\r\n            setScene(cena)\r\n\r\n            client.say(channel, data.response.replace(\"$name\", cena))\r\n        }\r\n    });\r\n\r\n    client.connect();\r\n\r\n}\r\n","import React, { useState } from 'react';\r\nimport { createConection, closeConection } from '../wss/streamlabsRemote';\r\nimport { createTmi, disconnectTmi } from '../wss/twitchChatbot';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nfunction Twitch() {\r\n\r\n    const [value, setValue] = useState(JSON.parse(localStorage.getItem(\"twitch-data\")) || {\r\n        username: '',\r\n        oauth: ''\r\n    })\r\n\r\n    const project = useSelector(state => state.project);\r\n    const dispatch = useDispatch();\r\n\r\n    const handleChange = e => setValue(prevState => ({ ...prevState, [e.target.name]: e.target.value }))\r\n\r\n    const onSubmitForm = e => {\r\n        e.preventDefault();\r\n        localStorage.setItem(\"twitch-data\", JSON.stringify(value))\r\n        if (project.statusTwitch === 'disconnected')\r\n            createTmi(value.username, value.oauth, [value.username], () => { }, () => { }, dispatch)\r\n        else\r\n            disconnectTmi()\r\n    }\r\n\r\n    return (\r\n        <div className=\"card mb-4 shadow-sm\">\r\n            <div className=\"card-header\">\r\n                <h4 className=\"my-0 fw-normal\">Twitch</h4>\r\n            </div>\r\n            <div className=\"card-body\">\r\n                <form onSubmit={onSubmitForm}>\r\n                    <div className=\"mb-3\">\r\n                        <input type=\"text\" name=\"username\" className=\"form-control\" placeholder=\"Username\" value={value.username} onChange={handleChange} />\r\n                    </div>\r\n                    <div className=\"mb-3\">\r\n                        <input type=\"text\" name=\"oauth\" className=\"form-control\" placeholder=\"OAuth\" value={value.oauth} onChange={handleChange} />\r\n                    </div>\r\n                    <ul className=\"list-unstyled mt-3 mb-4\">\r\n                        <li>{project.statusTwitch}</li>\r\n                    </ul>\r\n                    {project.statusTwitch === 'disconnected' && (\r\n                        <button type=\"submit\" className=\"w-100 btn btn-lg btn-primary\">Salvar</button>\r\n                    )}\r\n\r\n                    {project.statusTwitch !== 'disconnected' && (\r\n                        <button type=\"submit\" className=\"w-100 btn btn-lg btn-primary\">Desconectar</button>\r\n                    )}\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction OBS() {\r\n\r\n    const [value, setValue] = useState(JSON.parse(localStorage.getItem(\"obs-data\")) || {\r\n        url: 'http://127.0.0.1:59650/api',\r\n        token: ''\r\n    })\r\n\r\n    const project = useSelector(state => state.project);\r\n    const dispatch = useDispatch();\r\n\r\n    const handleChange = e => setValue(prevState => ({ ...prevState, [e.target.name]: e.target.value }))\r\n\r\n    const onSubmitForm = e => {\r\n        e.preventDefault();\r\n        localStorage.setItem(\"obs-data\", JSON.stringify(value))\r\n        if (project.statusObsRemote === 'disconnected')\r\n            createConection(value.url, value.token, () => { }, (e) => {\r\n                console.log(\"Error:\", e)\r\n            }, dispatch)\r\n        else\r\n            closeConection()\r\n    }\r\n\r\n    return (\r\n        <div className=\"card mb-4 shadow-sm\">\r\n            <div className=\"card-header\">\r\n                <h4 className=\"my-0 fw-normal\">Streamlabs OBS Remote</h4>\r\n            </div>\r\n            <div className=\"card-body\">\r\n                <form onSubmit={onSubmitForm}>\r\n                    <div className=\"mb-3\">\r\n                        <input type=\"text\" name=\"url\" className=\"form-control\" placeholder=\"URL\" value={value.url} onChange={handleChange} />\r\n                    </div>\r\n                    <div className=\"mb-3\">\r\n                        <input type=\"text\" name=\"token\" className=\"form-control\" placeholder=\"Token\" value={value.token} onChange={handleChange} />\r\n                    </div>\r\n                    <ul className=\"list-unstyled mt-3 mb-4\">\r\n                        <li>{project.statusObsRemote}</li>\r\n                    </ul>\r\n                    {project.statusObsRemote === 'disconnected' && (\r\n                        <button type=\"submit\" className=\"w-100 btn btn-lg btn-primary\">Salvar</button>\r\n                    )}\r\n\r\n                    {project.statusObsRemote !== 'disconnected' && (\r\n                        <button type=\"submit\" className=\"w-100 btn btn-lg btn-primary\">Desconectar</button>\r\n                    )}\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Home() {\r\n    return (\r\n        <div>\r\n            <div className=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pb-2 mb-3 border-bottom\">\r\n                <h1 className=\"h2\">Dashboard</h1>\r\n            </div>\r\n            <div className=\"row row-cols-1 row-cols-md-3 mb-3 text-center\">\r\n                <div className=\"col\">\r\n                    <Twitch />\r\n                </div>\r\n                <div className=\"col\">\r\n                    <OBS />\r\n                </div>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Home","import React, { useState } from 'react';\r\n\r\nfunction Command() {\r\n\r\n    const [value, setValue] = useState(JSON.parse(localStorage.getItem(\"command-obsRemote\")))\r\n\r\n    const handleChange = e => setValue(prevState => ({ ...prevState, [e.target.name]: e.target.value }))\r\n\r\n    const onSubmitForm = e => {\r\n        e.preventDefault();\r\n        localStorage.setItem(\"command-obsRemote\", JSON.stringify(value))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pb-2 mb-3 border-bottom\">\r\n                <h1 className=\"h2\">Command</h1>\r\n            </div>\r\n            <div className=\"row row-cols-1 row-cols-md-3 mb-3 text-center\">\r\n                <form onSubmit={onSubmitForm}>\r\n                    <div className=\"mb-3\">\r\n                        <input type=\"text\" name=\"command\" className=\"form-control\" placeholder=\"Comando Nome\" value={value.command} onChange={handleChange} />\r\n                    </div>\r\n\r\n                    <div className=\"mb-3\">\r\n                        <input type=\"text\" name=\"defaultScene\" className=\"form-control\" placeholder=\"Default Scene\" value={value.defaultScene} onChange={handleChange} />\r\n                    </div>\r\n\r\n                    <div className=\"mb-3\">\r\n                        <input type=\"text\" name=\"response\" className=\"form-control\" placeholder=\"Response\" value={value.response} onChange={handleChange} />\r\n                    </div>\r\n\r\n                    <button type=\"submit\" className=\"w-100 btn btn-lg btn-primary\">Salvar</button>\r\n                </form>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Command","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { createConection } from './wss/streamlabsRemote';\nimport { createTmi } from './wss/twitchChatbot';\nimport Home from './page/home';\nimport Comando from './page/comando';\n\nfunction App() {\n\n  const [state, setState] = useState(\"Home\")\n  const project = useSelector(state => state.project);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (localStorage.getItem(\"obs-data\")) {\n      let data = JSON.parse(localStorage.getItem(\"obs-data\"))\n      createConection(data.url, data.token, () => {\n      }, () => { }, dispatch)\n    }\n\n    if (localStorage.getItem(\"twitch-data\")) {\n      let data = JSON.parse(localStorage.getItem(\"twitch-data\"))\n      createTmi(data.username, data.oauth, [data.username], () => { }, () => { }, dispatch)\n    }\n\n    if (!localStorage.getItem(\"command-obsRemote\")) {\n      localStorage.setItem(\"command-obsRemote\", JSON.stringify({\n        command: \"!setscene\",\n        defaultScene: \"Game\",\n        response: \"Scene changed to: $name\"\n      }))\n    }\n\n  }, [])\n\n  return (\n    <div>\n      <nav className=\"navbar navbar-dark sticky-top bg-dark flex-md-nowrap p-0\">\n        <div className=\"navbar-brand col-sm-3 col-md-2 mr-0 fs-4\">Twitch Bot</div>\n      </nav>\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          <nav className=\"col-md-2 d-none d-md-block bg-light sidebar\">\n            <div className=\"sidebar-sticky\">\n              <ul className=\"nav flex-column\">\n                <li className=\"nav-item\">\n                  <a className=\"nav-link\" href=\"/#\" onClick={() => setState(\"Home\")}>\n                    <span data-feather=\"home\"></span>\n                    Home\n                  </a>\n                </li>\n                <li className=\"nav-item\">\n                  <a className=\"nav-link\" href=\"/#\" onClick={() => setState(\"Comando\")}>\n                    <span data-feather=\"terminal\"></span>\n                    Comando\n                </a>\n                </li>\n              </ul>\n            </div>\n          </nav>\n          <main role=\"main\" className=\"col-md-9 ml-sm-auto col-lg-10 pt-3 px-4\">\n            {state == \"Home\" && (<Home />)}\n            {state == \"Comando\" && (<Comando />)}\n          </main>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const start_state = {\n    statusObsRemote: \"disconnected\",\n    statusTwitch: \"disconnected\"\n}\n\nexport default function theme(state = start_state, action) {\n    switch (action.type) {\n        case \"SET_STATUS_OBS_REMOTE\":\n            return { ...state, statusObsRemote: action.statusObsRemote };\n        case \"SET_STATUS_TWITCH\":\n            return { ...state, statusTwitch: action.statusTwitch };\n        default:\n            return state;\n    }\n}","import { combineReducers } from 'redux'\nimport project from './project';\n\nexport default combineReducers({ project: project });","import { createStore } from 'redux';\nimport reducers from './reducers'\n\nexport default createStore(reducers)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap';\nimport './css/global.css';\nimport './scss/_spacing.scss';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Provider } from 'react-redux';\nimport Store from './store'\n\nconst feather = require('feather-icons')\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={Store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nfeather.replace()\n\n"],"sourceRoot":""}